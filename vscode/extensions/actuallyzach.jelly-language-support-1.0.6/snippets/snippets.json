{
    "Jelly Boilerplate": {
        "prefix": "import shortcuts",
        "body": [
            "import Shortcuts\n#Color: $1, #Icon: $2\n"
        ],
        "description": "A default template for a Jelly "
    },
    "Get Property": {
        "prefix": ".get(",
        "body": [
            ".get($1)"
        ],
        "description": "Placed after variable. Gets specified property from variable."
    },
    "Get Key": {
        "prefix": ".key(",
        "body": [
            ".key($1)"
        ],
        "description": "Placed after variable. Gets a specified key from variable."
    },
    "Type Casting": {
        "prefix": ".as(",
        "body": [
            ".as($1)"
        ],
        "description": "Placed after variable. Casts variable to specified type."
    },
	"flipImage": {
		"prefix": "Flip Image",
		"body": [
			"flipImage(image: $0, mode: $1)"
		],
		"description": "Flips an image."
	},
	"decodeURL": {
		"prefix": "Decode URL",
		"body": [
			"decodeURL(url: $0)"
		],
		"description": "Converts URL encoded text to normal characters."
	},
	"logWorkout": {
		"prefix": "Log Workout",
		"body": [
			"logWorkout(type: $0, date: $1, duration: $2, calories: $3, distance: $4)"
		],
		"description": "Logs a workout to the health app."
	},
	"attendeeDetail": {
		"prefix": "Get Attendee Detail",
		"body": [
			"attendeeDetail(detail: $0, attendee: $1)"
		],
		"description": "Gets a detail about the given event attendee."
	},
	"deleteFile": {
		"prefix": "Delete File",
		"body": [
			"deleteFile(input: $0, confirm: $1)"
		],
		"description": "Deletes the provided file."
	},
	"statistic": {
		"prefix": "Calculate Statistic",
		"body": [
			"statistic(input: $0, operation: $1)"
		],
		"description": "Calculates a statistic."
	},
	"batteryLevel": {
		"prefix": "Battery Level",
		"body": [
			"batteryLevel()"
		],
		"description": "Retrieves the devices battery level."
	},
	"getIP": {
		"prefix": "Get IP Address",
		"body": [
			"getIP(source: $0, type: $1)"
		],
		"description": "Gets the devices IP address."
	},
	"setFlashlight": {
		"prefix": "Set Flashlight",
		"body": [
			"setFlashlight(state: $0, level: $1)"
		],
		"description": "Sets the flashlight state and brightness."
	},
	"richTextFromHTML": {
		"prefix": "Make Rich Text From HTML",
		"body": [
			"richTextFromHTML(html: $0)"
		],
		"description": "Creates Rich Text from provided HTML."
	},
	"getUpcomingReminders": {
		"prefix": "Get Upcoming Reminders",
		"body": [
			"getUpcomingReminders(count: $0, list: $1)"
		],
		"description": "Retrieves the upcoming reminders from the given list. All Lists will get reminders from all lists."
	},
	"getType": {
		"prefix": "Get Type",
		"body": [
			"getType(input: $0)"
		],
		"description": "Get's the type of the given input."
	},
	"lowPowerMode": {
		"prefix": "Set Low Power Mode",
		"body": [
			"lowPowerMode(state: $0)"
		],
		"description": "Sets the devices low power mode."
	},
	"filterAttendees": {
		"prefix": "Filter Attendees",
		"body": [
			"filterAttendees(filter: $0)"
		],
		"description": "Filters the given Attendees. Attendees are people attending an event."
	},
	"getEmailFrom": {
		"prefix": "Get Email From Input",
		"body": [
			"getEmailFrom(input: $0)"
		],
		"description": "Gets emails from the given input."
	},
	"filterPhotos": {
		"prefix": "Filter Photos",
		"body": [
			"filterPhotos(filter: $0)"
		],
		"description": "Filters the given notes. Placing All Photos in the input will allow you to filter all of your photos."
	},
	"addToPlaylist": {
		"prefix": "Add to Playlist",
		"body": [
			"addToPlaylist(music: $0, playlist: $1)"
		],
		"description": "Adds the provided music to the provided playlist."
	},
	"toggleLowPowerMode": {
		"prefix": "Toggle Low Power Mode",
		"body": [
			"toggleLowPowerMode()"
		],
		"description": "Toggles low power mode."
	},
	"makeArchive": {
		"prefix": "Make Archive",
		"body": [
			"makeArchive(input: $0, type: $1)"
		],
		"description": "Makes an archive of the given file."
	},
	"setAirplaneMode": {
		"prefix": "Set Airplane Mode",
		"body": [
			"setAirplaneMode(state: $0)"
		],
		"description": "Sets the devices airplane mode."
	},
	"getallalarms": {
		"prefix": "Get All Alarms",
		"body": [
			"getallalarms(show: $0)"
		],
		"description": "Retrieves all of your alarms."
	},
	"selectSong": {
		"prefix": "Select Song From Apple Music",
		"body": [
			"selectSong(multiple: $0)"
		],
		"description": "Allows you to select a song from Apple Music."
	},
	"addFrameToGIF": {
		"prefix": "Add Frame To GIF",
		"body": [
			"addFrameToGIF(photo: $0, gif: $1, delay: $2, autoSize: $3, width: $4, height: $5)"
		],
		"description": "Adds the given photo to a GIF as a frame."
	},
	"randomNumber": {
		"prefix": "Random Number",
		"body": [
			"randomNumber(min: $0, max: $1)"
		],
		"description": "Get's a random number between the provided max and min."
	},
	"showWebPage": {
		"prefix": "Show Webpage",
		"body": [
			"showWebPage(url: $0, reader: $1)"
		],
		"description": "Shows a webpage at the given URLS."
	},
	"getURLSFromInput": {
		"prefix": "Get URLS From Input",
		"body": [
			"getURLSFromInput(text: $0)"
		],
		"description": "Retrieves URLS from the input."
	},
	"eventDetail": {
		"prefix": "Get Event Detail",
		"body": [
			"eventDetail(detail: $0, event: $1)"
		],
		"description": "Gets a detail about the given event."
	},
	"showNote": {
		"prefix": "Show Note",
		"body": [
			"showNote(note: $0)"
		],
		"description": "Shows the provided note."
	},
	"importShortcut": {
		"prefix": "Import Shortcut",
		"body": [
			"importShortcut(file: $0)"
		],
		"description": "Import a shortcut into Jellycuts. Action for Jellycuts."
	},
	"dictionary": {
		"prefix": "Dictionary",
		"body": [
			"dictionary(json: $0)"
		],
		"description": "Creates a dictionary based on the given JSON. JSON can be replaced with a dictionary from the dictionary builder."
	},
	"adjustDate": {
		"prefix": "Adjust Date",
		"body": [
			"adjustDate(operation: $0, duration: $1, date: $2)"
		],
		"description": "Adjusts the given date by adding or subtracting the given duration. If you use any get operation you do not need a duration."
	},
	"overlayImage": {
		"prefix": "Overlay Image",
		"body": [
			"overlayImage(image1: $0, image2: $1, editor: $2, height: $3, width: $4, position: $5, opacity: $6, rotation: $7)"
		],
		"description": "Overlays one image onto another image."
	},
	"cellularDetails": {
		"prefix": "Get Cellular Details",
		"body": [
			"cellularDetails(detail: $0)"
		],
		"description": "Gets a detail about the devices Cellular Connection."
	},
	"createPDF": {
		"prefix": "Create PDF",
		"body": [
			"createPDF(input: $0, loop: $1, singlePageNumb: $2, pageStart: $3, pageEnd: $4)"
		],
		"description": "Creates a pdf from the provided input."
	},
	"toggleOrientationLock": {
		"prefix": "Toggle Orientation Lock",
		"body": [
			"toggleOrientationLock()"
		],
		"description": "Toggles the state of the devices Orientation Lock."
	},
	"encodeMedia": {
		"prefix": "Encode Media",
		"body": [
			"encodeMedia(media: $0, size: $1, speed: $2, customSpeed: $3, title: $4, artist: $5, album: $6, genre: $7, year: $8, artwork: $9)"
		],
		"description": "Encodes the given media into a video."
	},
	"getName": {
		"prefix": "Get Name",
		"body": [
			"getName(input: $0)"
		],
		"description": "Get's the name of the given input."
	},
	"locationDetail": {
		"prefix": "Get Location Detail",
		"body": [
			"locationDetail(detail: $0, location: $1)"
		],
		"description": "Gets a detail about the given location."
	},
	"openShortcut": {
		"prefix": "Open Shortcut",
		"body": [
			"openShortcut(name: $0)"
		],
		"description": "Opens the shortcut editor to the specified Shortcut."
	},
	"filterArticles": {
		"prefix": "Filter Articles",
		"body": [
			"filterArticles(filter: $0)"
		],
		"description": "Filters the given articles."
	},
	"debugShortcut": {
		"prefix": "Debug Content Attribution",
		"body": [
			"debugShortcut()"
		],
		"description": "A weird debug action."
	},
	"searchItunes": {
		"prefix": "Search iTunes",
		"body": [
			"searchItunes(query: $0, category: $1, by: $2, results: $3, count: $4)"
		],
		"description": "Searches iTunes based of the parameters you provide.."
	},
	"vibrate": {
		"prefix": "Vibrate Device",
		"body": [
			"vibrate()"
		],
		"description": "Vibrates the device."
	},
	"setVoiceData": {
		"prefix": "Set Voice Data",
		"body": [
			"setVoiceData(mode: $0, sim: $1)"
		],
		"description": "Set's the devices cellular data settings. Can be used to change the current sim, and cell mode (4G, LTE, 5G)."
	},
	"setVolume": {
		"prefix": "Set Volume",
		"body": [
			"setVolume(level: $0)"
		],
		"description": "Sets the devices volume."
	},
	"openApp": {
		"prefix": "Open App",
		"body": [
			"openApp(id: $0)"
		],
		"description": "Opens an app on the device."
	},
	"round": {
		"prefix": "Round Number",
		"body": [
			"round(number: $0, roundTo: $1, mode: $2)"
		],
		"description": "Rounds a number depending on the parameters."
	},
	"stockQuote": {
		"prefix": "Stock Quote",
		"body": [
			"stockQuote(symbol: $0)"
		],
		"description": "Gets a quote for the provided stock symbol."
	},
	"skipBack": {
		"prefix": "Skip Backward",
		"body": [
			"skipBack(point: $0)"
		],
		"description": "Skips backwards in the current media queue."
	},
	"selectedEmail": {
		"prefix": "Select Email",
		"body": [
			"selectedEmail()"
		],
		"description": "Allows you to select a contact's email."
	},
	"removeReminders": {
		"prefix": "Remove Reminders",
		"body": [
			"removeReminders(reminders: $0)"
		],
		"description": "Removes the given reminders."
	},
	"fileDetail": {
		"prefix": "Get File Details",
		"body": [
			"fileDetail(input: $0, property: $1)"
		],
		"description": "Retrieves a detail about a file."
	},
	"showDefinition": {
		"prefix": "Show Definition",
		"body": [
			"showDefinition(text: $0)"
		],
		"description": "Gets the definition of a word."
	},
	"filterCalendar": {
		"prefix": "Filter Calendar Events",
		"body": [
			"filterCalendar(filter: $0)"
		],
		"description": "Filters the given events. Placing All Events in the input will allow you to filter all of your calendar events."
	},
	"runShortcut": {
		"prefix": "Run Shortcut",
		"body": [
			"runShortcut(name: $0, input: $1, show: $2)"
		],
		"description": "Runs the given shortcut."
	},
	"getPodcasts": {
		"prefix": "Get Podcasts",
		"body": [
			"getPodcasts()"
		],
		"description": "Retreives all the podcasts in your library."
	},
	"waitToReturn": {
		"prefix": "Wait to return",
		"body": [
			"waitToReturn()"
		],
		"description": "Waits for you to return back to the app to continue execution."
	},
	"productDetail": {
		"prefix": "Get Product Detail",
		"body": [
			"productDetail(detail: $0, product: $1)"
		],
		"description": "Gets a detail about the given product."
	},
	"getImagesFrom": {
		"prefix": "Get Images From Input",
		"body": [
			"getImagesFrom(input: $0)"
		],
		"description": "Gets Images from the given input."
	},
	"getFileOfType": {
		"prefix": "Get File Of Type",
		"body": [
			"getFileOfType(input: $0, type: $1)"
		],
		"description": "Retrieves a file of the provided type from the given input.."
	},
	"saveToCameraRoll": {
		"prefix": "Save to Camera Roll",
		"body": [
			"saveToCameraRoll(image: $0, album: $1)"
		],
		"description": "Saves the given image to the camera roll."
	},
	"quicklook": {
		"prefix": "Quicklook",
		"body": [
			"quicklook(input: $0)"
		],
		"description": "Quicklooks the provided input."
	},
	"getPhonesFrom": {
		"prefix": "Get Phone Numbers From Input",
		"body": [
			"getPhonesFrom(input: $0)"
		],
		"description": "Gets phone numbers from the given input."
	},
	"wait": {
		"prefix": "Wait",
		"body": [
			"wait(seconds: $0)"
		],
		"description": "Waits a specified amount of seconds."
	},
	"markdownFromRich": {
		"prefix": "Make Markdown From Rich Text",
		"body": [
			"markdownFromRich(text: $0)"
		],
		"description": "Makes markdown from the given rich text."
	},
	"replaceText": {
		"prefix": "Replace Text",
		"body": [
			"replaceText(input: $0, find: $1, replace: $2, isRegex: $3, caseSensitive: $4)"
		],
		"description": "Replaces text based on the parameters."
	},
	"contentGraph": {
		"prefix": "View Content Graph",
		"body": [
			"contentGraph(input: $0)"
		],
		"description": "Displays a content graph of variable."
	},
	"getAddressFrom": {
		"prefix": "Get Address From Input",
		"body": [
			"getAddressFrom(input: $0)"
		],
		"description": "Gets addresses from the given input."
	},
	"appendNote": {
		"prefix": "Append Note",
		"body": [
			"appendNote(text: $0, note: $1)"
		],
		"description": "Appends text to the end of a note."
	},
	"addToReadingList": {
		"prefix": "Add to Reading List",
		"body": [
			"addToReadingList(urls: $0)"
		],
		"description": "Adds a URL to your reading list."
	},
	"setBrightness": {
		"prefix": "Set Brightness",
		"body": [
			"setBrightness(value: $0)"
		],
		"description": "Sets the devices bluetooth to the given double."
	},
	"sendNotification": {
		"prefix": "Send Notification",
		"body": [
			"sendNotification(body: $0, title: $1, sound: $2, attachment: $3)"
		],
		"description": "Sends the user a notifcation."
	},
	"getArticle": {
		"prefix": "Get Article",
		"body": [
			"getArticle(url: $0)"
		],
		"description": "Retrieves an article using safari reader."
	},
	"encode": {
		"prefix": "Encode Base64",
		"body": [
			"encode(input: $0)"
		],
		"description": "Encodes the given input into base64 without line breaks."
	},
	"scanQR": {
		"prefix": "Scan QR Code",
		"body": [
			"scanQR()"
		],
		"description": "Scans a QR code and returns the output."
	},
	"seek": {
		"prefix": "Seek Media",
		"body": [
			"seek(behavior: $0, time: $1)"
		],
		"description": "Seeks in the current media."
	},
	"facetime": {
		"prefix": "Facetime",
		"body": [
			"facetime(type: $0, contact: $1)"
		],
		"description": "Facetimes the given contact."
	},
	"extractArchive": {
		"prefix": "Extract Archive",
		"body": [
			"extractArchive(input: $0)"
		],
		"description": "Extracts the given archive."
	},
	"appearanceDetail": {
		"prefix": "Get Appearance Detail",
		"body": [
			"appearanceDetail(detail: $0, appearance: $1)"
		],
		"description": "Gets a detail about the given device Appearance."
	},
	"takeVideo": {
		"prefix": "Take Video",
		"body": [
			"takeVideo(camera: $0, quality: $1, start: $2)"
		],
		"description": "Takes a video."
	},
	"createNote": {
		"prefix": "Create Note",
		"body": [
			"createNote(text: $0, show: $1)"
		],
		"description": "Creates a note with the given input."
	},
	"recordAudio": {
		"prefix": "Record Audio",
		"body": [
			"recordAudio(quality: $0, start: $1, end: $2, duration: $3)"
		],
		"description": "Records audio with the given parameters."
	},
	"encodeURL": {
		"prefix": "Encode URL",
		"body": [
			"encodeURL(url: $0)"
		],
		"description": "Encodes the given text in URL allowed characters."
	},
	"searchAppStore": {
		"prefix": "Search App Store",
		"body": [
			"searchAppStore(input: $0, by: $1, region: $2, device: $3, limit: $4)"
		],
		"description": "Searches the app store using the given parameters."
	},
	"translateText": {
		"prefix": "Translate Text",
		"body": [
			"translateText(text: $0, from: $1, to: $2)"
		],
		"description": "Translates the given text from one language to another."
	},
	"getTextFrom": {
		"prefix": "Get Text From Input",
		"body": [
			"getTextFrom(input: $0)"
		],
		"description": "Gets the text from the given input."
	},
	"matchText": {
		"prefix": "Match Text",
		"body": [
			"matchText(text: $0, regex: $1, caseSensitive: $2)"
		],
		"description": "Matches text in the input based on regex."
	},
	"filterContacts": {
		"prefix": "Filter Contacts",
		"body": [
			"filterContacts(filter: $0)"
		],
		"description": "Filters the given contacts. Placing All Contacts in the input will allow you to filter all of your contacts."
	},
	"createPlaylist": {
		"prefix": "Create Playlist",
		"body": [
			"createPlaylist(name: $0, music: $1, author: $2, description: $3)"
		],
		"description": "Creates a playlist with the given music, name, author and description."
	},
	"setBluetooth": {
		"prefix": "Set Bluetooth",
		"body": [
			"setBluetooth(value: $0)"
		],
		"description": "Sets the devices bluetooth to the given boolean."
	},
	"splitText": {
		"prefix": "Split Text",
		"body": [
			"splitText(text: $0, separator: $1, customSeparator: $2)"
		],
		"description": "Splits the text by a separator. If the separator is set to Custom you can add a customSeparator to split by any character you want."
	},
	"reminderDetail": {
		"prefix": "Get Reminder Detail",
		"body": [
			"reminderDetail(detail: $0, reminder: $1)"
		],
		"description": "Gets a detail about the given reminder."
	},
	"url": {
		"prefix": "URL",
		"body": [
			"url(url: $0)"
		],
		"description": "Just a URL."
	},
	"videoFromGif": {
		"prefix": "Make Video from GIF",
		"body": [
			"videoFromGif(gif: $0, loop: $1)"
		],
		"description": "Creates a video from a GIF. It's pronounced GIF"
	},
	"getLastPhoto": {
		"prefix": "Get Last Photo",
		"body": [
			"getLastPhoto(count: $0, screenshots: $1)"
		],
		"description": "Retrieves the last n photos in your library. You can optionally include screenshots or not."
	},
	"play": {
		"prefix": "Play Music",
		"body": [
			"play(behavior: $0, source: $1)"
		],
		"description": "Plays or pauses the current music."
	},
	"correctSpelling": {
		"prefix": "Correct Spelling",
		"body": [
			"correctSpelling(text: $0)"
		],
		"description": "Corrects the spelling of a word or sentence. Words can be placed in an array."
	},
	"maskImage": {
		"prefix": "Mask Image",
		"body": [
			"maskImage(image: $0, mode: $1, mask: $2)"
		],
		"description": "Masks an image."
	},
	"createFolder": {
		"prefix": "Create Folder",
		"body": [
			"createFolder(path: $0)"
		],
		"description": "Create folder at a path."
	},
	"changeCase": {
		"prefix": "Change Text Case",
		"body": [
			"changeCase(text: $0, case: $1)"
		],
		"description": "Changes the case of text."
	},
	"filterFiles": {
		"prefix": "Filter File",
		"body": [
			"filterFiles(filter: $0)"
		],
		"description": "Filters the given files."
	},
	"appendFile": {
		"prefix": "Append File",
		"body": [
			"appendFile(input: $0, path: $1, newLine: $2)"
		],
		"description": "Appends contents to the end of a file."
	},
	"filterImages": {
		"prefix": "Filter Images",
		"body": [
			"filterImages(filter: $0)"
		],
		"description": "Filters the given images."
	},
	"print": {
		"prefix": "Print",
		"body": [
			"print(input: $0)"
		],
		"description": "Prints the input."
	},
	"getTimeBetween": {
		"prefix": "Get Time Between Dates",
		"body": [
			"getTimeBetween(first: $0, second: $1, interval: $2)"
		],
		"description": "Retrieves the time between the two dates."
	},
	"getPlaylist": {
		"prefix": "Get Playlist",
		"body": [
			"getPlaylist(name: $0)"
		],
		"description": "Retrieves a playlist."
	},
	"contactDetail": {
		"prefix": "Get Contact Detail",
		"body": [
			"contactDetail(detail: $0, contact: $1)"
		],
		"description": "Gets a detail about the given contact."
	},
	"getClass": {
		"prefix": "Get Object of Class",
		"body": [
			"getClass(input: $0, class: $1)"
		],
		"description": "Gets an object with the defined class."
	},
	"getLastScreenshot": {
		"prefix": "Get Last Screenshots",
		"body": [
			"getLastScreenshot(count: $0)"
		],
		"description": "Retrieves the last n screenshots you took."
	},
	"addUpNext": {
		"prefix": "Add Music Up Next",
		"body": [
			"addUpNext(music: $0, place: $1)"
		],
		"description": "Adds the provided music to the up next queue."
	},
	"getForecast": {
		"prefix": "Get Forecast",
		"body": [
			"getForecast(type: $0)"
		],
		"description": "Retrieves the forecast in your local area."
	},
	"setAppearance": {
		"prefix": "Set Device Appearance",
		"body": [
			"setAppearance(mode: $0)"
		],
		"description": "Sets the devices appearance to the given style."
	},
	"airdrop": {
		"prefix": "Airdrop",
		"body": [
			"airdrop(file: $0)"
		],
		"description": "Airdrops the input."
	},
	"sampleDetail": {
		"prefix": "Get Health Sample Detail",
		"body": [
			"sampleDetail(detail: $0, sample: $1)"
		],
		"description": "Gets a detail about the given health sample."
	},
	"getPageRSS": {
		"prefix": "Get RSS From Page",
		"body": [
			"getPageRSS(url: $0)"
		],
		"description": "Retrieves RSS feeds from page."
	},
	"getRSSItems": {
		"prefix": "Get RSS Items From Feed",
		"body": [
			"getRSSItems(url: $0, count: $1)"
		],
		"description": "Gets the RSS items from an RSS Feed."
	},
	"deviceDetails": {
		"prefix": "Get Device Details",
		"body": [
			"deviceDetails(detail: $0)"
		],
		"description": "Retrieves a detail about the device."
	},
	"keysFrom": {
		"prefix": "Get All Keys from Dictionary",
		"body": [
			"keysFrom(dictionary: $0)"
		],
		"description": "Get all of the keys from a dictionary."
	},
	"getHeaders": {
		"prefix": "Get URL Headers",
		"body": [
			"getHeaders(url: $0)"
		],
		"description": "Retrieves the headers at a certain URL."
	},
	"call": {
		"prefix": "Call",
		"body": [
			"call(contact: $0)"
		],
		"description": "Calls the given contact."
	},
	"filterReminders": {
		"prefix": "Filter Reminders",
		"body": [
			"filterReminders(filter: $0)"
		],
		"description": "Filters the given reminders. Placing All Reminders in the input will allow you to filter all of your reminders."
	},
	"artistDetail": {
		"prefix": "Get iTunes Artist Detail",
		"body": [
			"artistDetail(property: $0, note: $1)"
		],
		"description": "Gets a detail about the iTunes artist."
	},
	"urlContents": {
		"prefix": "Contents Of URL",
		"body": [
			"urlContents(url: $0)"
		],
		"description": "Retrieves the contents of a url. Returns a webpage."
	},
	"list": {
		"prefix": "List",
		"body": [
			"list(items: $0)"
		],
		"description": "Creates a list."
	},
	"combineImage": {
		"prefix": "Combine Image",
		"body": [
			"combineImage(images: $0, mode: $1, spacing: $2)"
		],
		"description": "Combines an image."
	},
	"showInCalendar": {
		"prefix": "Show in Calendar",
		"body": [
			"showInCalendar(event: $0)"
		],
		"description": "Shows the provided event on the calendar."
	},
	"userActivity": {
		"prefix": "User Activity",
		"body": [
			"userActivity()"
		],
		"description": "This is just a blank action that does not do anything."
	},
	"getItemFromList": {
		"prefix": "Get Item From List",
		"body": [
			"getItemFromList(list: $0, type: $1, index: $2, startIndex: $3, endIndex: $4)"
		],
		"description": "Gets an item from the given list. If you choose to get items in range you can use the startIndex and endIndex to define the range, you do not need to give it an index."
	},
	"toggleFlashlight": {
		"prefix": "Toggle Flashlight",
		"body": [
			"toggleFlashlight()"
		],
		"description": "Toggles the flashlight."
	},
	"createQR": {
		"prefix": "Create QR Code",
		"body": [
			"createQR(text: $0, correction: $1)"
		],
		"description": "Creates a QR for the given text."
	},
	"valuesFrom": {
		"prefix": "Get All Values from Dictionary",
		"body": [
			"valuesFrom(dictionary: $0)"
		],
		"description": "Get all of the values from a dictionary."
	},
	"combineText": {
		"prefix": "Combine Text",
		"body": [
			"combineText(text: $0, combine: $1, separator: $2)"
		],
		"description": "Combines the given text. Text can be given in an array."
	},
	"shazamIt": {
		"prefix": "Shazam It",
		"body": [
			"shazamIt()"
		],
		"description": "Starts a Shazam."
	},
	"getLastBurst": {
		"prefix": "Get Last Bursts",
		"body": [
			"getLastBurst(count: $0)"
		],
		"description": "Retrieves the last n bursts you took."
	},
	"getDictionaryFrom": {
		"prefix": "Get Dictionary From Input",
		"body": [
			"getDictionaryFrom(input: $0)"
		],
		"description": "Gets a dictionary from the given input."
	},
	"takeScreenshot": {
		"prefix": "Take a Screenshot",
		"body": [
			"takeScreenshot()"
		],
		"description": "Takes a screenshot of the devices current screen."
	},
	"siriDonation": {
		"prefix": "Siri Donation",
		"body": [
			"siriDonation()"
		],
		"description": "This is just a blank action that does not do anything."
	},
	"share": {
		"prefix": "Share",
		"body": [
			"share(file: $0)"
		],
		"description": "Shares the input."
	},
	"playPodcast": {
		"prefix": "Play Podcast",
		"body": [
			"playPodcast(podcast: $0)"
		],
		"description": "Subscribes to the Podcast at the given feed url in Apple Podcasts."
	},
	"grabJellycut": {
		"prefix": "Grab Jellycut",
		"body": [
			"grabJellycut()"
		],
		"description": "Get's the plist from the latest exported Jellycut."
	},
	"getClipboard": {
		"prefix": "Get Clipboard",
		"body": [
			"getClipboard()"
		],
		"description": "Get's the devices clipboard."
	},
	"getDateFrom": {
		"prefix": "Get Date From Input",
		"body": [
			"getDateFrom(input: $0)"
		],
		"description": "Gets the dates from the given input."
	},
	"choose": {
		"prefix": "Choose From List",
		"body": [
			"choose(list: $0, prompt: $1, multiple: $2, all: $3)"
		],
		"description": "Allows you to choose an item from the given list."
	},
	"clearUpNext": {
		"prefix": "Clear Up Next",
		"body": [
			"clearUpNext()"
		],
		"description": "Clears the up next queue."
	},
	"removeFromAlbum": {
		"prefix": "Remove From Album",
		"body": [
			"removeFromAlbum(image: $0, album: $1)"
		],
		"description": "Removes an image from an album."
	},
	"toggleAppearance": {
		"prefix": "Toggle Device Appearance",
		"body": [
			"toggleAppearance()"
		],
		"description": "Toggles the devices appearance"
	},
	"decode": {
		"prefix": "Decode Base64",
		"body": [
			"decode(input: $0)"
		],
		"description": "Decodes the given base64 input."
	},
	"getCurrentSong": {
		"prefix": "Get Current Song",
		"body": [
			"getCurrentSong()"
		],
		"description": "Retreives the current song playing."
	},
	"formatDate": {
		"prefix": "Format Date",
		"body": [
			"formatDate(date: $0, dStyle: $1, tStyle: $2, custom: $3, isoTime: $4)"
		],
		"description": "Formats the given date."
	},
	"getLastLivePhoto": {
		"prefix": "Get Last Live Photos",
		"body": [
			"getLastLivePhoto(count: $0)"
		],
		"description": "Retrieves the last n live photos you took."
	},
	"skipForward": {
		"prefix": "Skip Forward",
		"body": [
			"skipForward()"
		],
		"description": "Skips forward in the current media queue."
	},
	"getLocation": {
		"prefix": "Get Location",
		"body": [
			"getLocation(input: $0)"
		],
		"description": "Gets the devices current location."
	},
	"runJavascriptOnWebpage": {
		"prefix": "Run Javascript on Webpage",
		"body": [
			"runJavascriptOnWebpage(url: $0, javascript: $1)"
		],
		"description": "Runs the given javascript on a webpage."
	},
	"selectPhoto": {
		"prefix": "Select Photo",
		"body": [
			"selectPhoto(types: $0, multiple: $1)"
		],
		"description": "Allows you to select a photo."
	},
	"urlComponent": {
		"prefix": "Get URL Component",
		"body": [
			"urlComponent(url: $0, component: $1)"
		],
		"description": "Retrieves component about URL."
	},
	"detectLanguage": {
		"prefix": "Detect Language",
		"body": [
			"detectLanguage(text: $0)"
		],
		"description": "Detects the language of the given text."
	},
	"dictateText": {
		"prefix": "Dictate Text",
		"body": [
			"dictateText(language: $0, endTrigger: $1)"
		],
		"description": "Creates text from a dictation."
	},
	"showResult": {
		"prefix": "Show Result",
		"body": [
			"showResult(text: $0)"
		],
		"description": "Shows the given result."
	},
	"stockDetail": {
		"prefix": "Get Stock Detail",
		"body": [
			"stockDetail(detail: $0, stock: $1)"
		],
		"description": "Gets a detail about the given stock."
	},
	"setClipboard": {
		"prefix": "Set Clipboard",
		"body": [
			"setClipboard(variable: $0, local: $1, expiration: $2)"
		],
		"description": "Sets the devices clipboard to the input."
	},
	"getFrames": {
		"prefix": "Get Frames",
		"body": [
			"getFrames(image: $0)"
		],
		"description": "Get's all the frames from the given media."
	},
	"getPodcastEpisodes": {
		"prefix": "Get Podcast Episodes",
		"body": [
			"getPodcastEpisodes(input: $0)"
		],
		"description": "Retreives the episodes from a podcast."
	},
	"sendMessage": {
		"prefix": "Send Message",
		"body": [
			"sendMessage(message: $0, recipient: $1, show: $2)"
		],
		"description": "Sends a message to a recipient."
	},
	"setMediaDestination": {
		"prefix": "Set Media Destination",
		"body": [
			"setMediaDestination(device: $0)"
		],
		"description": "Sets the playback destination of the current media."
	},
	"pageDetail": {
		"prefix": "Get Page Detail",
		"body": [
			"pageDetail(detail: $0, webpage: $1)"
		],
		"description": "Gets a detail about the given Apple Pages Document."
	},
	"formatNumber": {
		"prefix": "Format Number",
		"body": [
			"formatNumber(number: $0, places: $1)"
		],
		"description": "Formats a number to the given decimal places."
	},
	"deletePhotos": {
		"prefix": "Delete Photos",
		"body": [
			"deletePhotos(photos: $0)"
		],
		"description": "Deletes the given photos."
	},
	"calculate": {
		"prefix": "Calculate Expression",
		"body": [
			"calculate(input: $0)"
		],
		"description": "Calculates an expression"
	},
	"playSound": {
		"prefix": "Play Sound",
		"body": [
			"playSound(file: $0)"
		],
		"description": "Play's the sound from the given input."
	},
	"getShortcuts": {
		"prefix": "Get Shortcuts",
		"body": [
			"getShortcuts()"
		],
		"description": "Retrieves a list of all of your shortcuts."
	},
	"expandURL": {
		"prefix": "Expand URL",
		"body": [
			"expandURL(url: $0)"
		],
		"description": "Expands the given URL."
	},
	"filterLocations": {
		"prefix": "Filter Locations",
		"body": [
			"filterLocations(filter: $0)"
		],
		"description": "Filters the given locations."
	},
	"saveFile": {
		"prefix": "Save File",
		"body": [
			"saveFile(input: $0, ask: $1, path: $2, overwrite: $3)"
		],
		"description": "Saves a file to a certain path. Can also show a save prompt if ask is true."
	},
	"continueInShortcuts": {
		"prefix": "Continue In Shortcuts",
		"body": [
			"continueInShortcuts()"
		],
		"description": "Makes the shortcut continue in the Shortcuts app."
	},
	"getMatchGroup": {
		"prefix": "Get Match Group",
		"body": [
			"getMatchGroup(type: $0, matches: $1, index: $2)"
		],
		"description": "Gets the a certain group in a regex match."
	},
	"getLastImport": {
		"prefix": "Get Last Photo Import",
		"body": [
			"getLastImport()"
		],
		"description": "Retrieves the last photo you imported."
	},
	"timer": {
		"prefix": "Start Timer",
		"body": [
			"timer(duration: $0)"
		],
		"description": "Starts a timer for the given time."
	},
	"date": {
		"prefix": "Date",
		"body": [
			"date(date: $0)"
		],
		"description": "Creates a Date."
	},
	"trimVideo": {
		"prefix": "Trim Video",
		"body": [
			"trimVideo(video: $0)"
		],
		"description": "Trims a video."
	},
	"encodeAudio": {
		"prefix": "Encode Audio",
		"body": [
			"encodeAudio(media: $0, format: $1, speed: $2, customSpeed: $3, title: $4, artist: $5, album: $6, genre: $7, year: $8, artwork: $9)"
		],
		"description": "Encodes the given audio."
	},
	"hash": {
		"prefix": "Hash",
		"body": [
			"hash(input: $0, type: $1)"
		],
		"description": "Hashes the provided input."
	},
	"resizeImage": {
		"prefix": "Resize Image",
		"body": [
			"resizeImage(image: $0, height: $1, width: $2)"
		],
		"description": "Resizes an image to a certain height and width."
	},
	"filterMusic": {
		"prefix": "Filter Music",
		"body": [
			"filterMusic(filter: $0)"
		],
		"description": "Filters the given music. Placing All Music in the input will allow you to filter all of your music."
	},
	"setCellular": {
		"prefix": "Set Cellular",
		"body": [
			"setCellular(state: $0)"
		],
		"description": "Sets the state of the devices cellular connection."
	},
	"speakText": {
		"prefix": "Speak Text",
		"body": [
			"speakText(text: $0, wait: $1, rate: $2, pitch: $3, language: $4)"
		],
		"description": "Speaks the given text."
	},
	"math": {
		"prefix": "Math",
		"body": [
			"math(input: $0, operation: $1, operand: $2, scientific: $3)"
		],
		"description": "Solves a math equation. You can use +, -, ×, ÷, and … as operations. When using … you can apply a scientific operation type."
	},
	"runSSH": {
		"prefix": "Run Script Over SSH",
		"body": [
			"runSSH(host: $0, port: $1, user: $2, auth: $3, password: $4, input: $5, script: $6)"
		],
		"description": "Runs the given script over an SSH connection."
	},
	"selectPhone": {
		"prefix": "Select Phone Number",
		"body": [
			"selectPhone()"
		],
		"description": "Allows you to select a phone number."
	},
	"playMusic": {
		"prefix": "Play Music",
		"body": [
			"playMusic(music: $0, shuffle: $1, repeat: $2)"
		],
		"description": "Start's playing the provided music."
	},
	"toggleAirplaneMode": {
		"prefix": "Toggle Airplane Mode",
		"body": [
			"toggleAirplaneMode()"
		],
		"description": "Toggles airplane mode."
	},
	"shazamDetail": {
		"prefix": "Get Shazam Detail",
		"body": [
			"shazamDetail(detail: $0, shazam: $1)"
		],
		"description": "Gets a detail about the given Shazam."
	},
	"xCallbackURL": {
		"prefix": "Open X-Callback URL",
		"body": [
			"xCallbackURL(url: $0, custom: $1, success: $2, cancel: $3, error: $4, customXSuccess: $5, xSuccess: $6)"
		],
		"description": "Run an x-callback URL."
	},
	"appDetail": {
		"prefix": "Get App Detail",
		"body": [
			"appDetail(detail: $0, app: $1)"
		],
		"description": "Gets a detail about the given app."
	},
	"getFileLink": {
		"prefix": "Get File Link",
		"body": [
			"getFileLink(file: $0)"
		],
		"description": "Gets the iCloud link to a certain file."
	},
	"changeWallpaper": {
		"prefix": "Change Wallpaper",
		"body": [
			"changeWallpaper(image: $0, location: $1, preview: $2)"
		],
		"description": "Changes the devices wallpaper."
	},
	"openURL": {
		"prefix": "Open URL",
		"body": [
			"openURL(url: $0)"
		],
		"description": "Opens the given URL."
	},
	"askForInput": {
		"prefix": "Ask for Input",
		"body": [
			"askForInput(prompt: $0, type: $1, default: $2)"
		],
		"description": "Asks the user for input input."
	},
	"showReminderList": {
		"prefix": "Show Reminders List",
		"body": [
			"showReminderList(list: $0)"
		],
		"description": "Shows the given reminder list."
	},
	"uploadPhotos": {
		"prefix": "Upload Photos To Shared Album",
		"body": [
			"uploadPhotos(photos: $0)"
		],
		"description": "Uploads the given photos to the shared photos album."
	},
	"getFile": {
		"prefix": "Get File",
		"body": [
			"getFile(picker: $0, path: $1, error: $2, multiple: $3)"
		],
		"description": "Retrieves the file at a given path. It can also open a document picker if there is no path provided and the picker parameter is set to true."
	},
	"setOrientationLock": {
		"prefix": "Set Orientation Lock",
		"body": [
			"setOrientationLock(state: $0)"
		],
		"description": "Sets the state of the devices Orientation Lock."
	},
	"exit": {
		"prefix": "Exit Shortcut",
		"body": [
			"exit(var: $0)"
		],
		"description": "Exits the shortcut. This works like a return function basically. You can return a value if you place a variable in the parameters."
	},
	"searchPodcasts": {
		"prefix": "Search Podcasts",
		"body": [
			"searchPodcasts(query: $0, by: $1, results: $2, country: $3, items: $4)"
		],
		"description": "Search Apple Podcasts based on the given search terms."
	},
	"makeGIF": {
		"prefix": "Create GIF",
		"body": [
			"makeGIF(content: $0, frameTime: $1, loopOn: $2, loopCount: $3, autoSize: $4, width: $5, height: $6)"
		],
		"description": "Creates a GIF from the provided input."
	},
	"podcastDetail": {
		"prefix": "Get Podcast Show Detail",
		"body": [
			"podcastDetail(detail: $0, show: $1)"
		],
		"description": "Gets a detail about the given Podcast show. Checkout Launched it's a super good show."
	},
	"prependFile": {
		"prefix": "Prepend File",
		"body": [
			"prependFile(input: $0, path: $1, newLine: $2)"
		],
		"description": "Prepends contents to the file."
	},
	"getContactsFrom": {
		"prefix": "Get Contacts From Input",
		"body": [
			"getContactsFrom(input: $0)"
		],
		"description": "Gets contacts from the given input."
	},
	"getNumbersFrom": {
		"prefix": "Get Numbers From Input",
		"body": [
			"getNumbersFrom(text: $0)"
		],
		"description": "Detects the numbers in the given input."
	},
	"articleDetail": {
		"prefix": "Get Article Detail",
		"body": [
			"articleDetail(detail: $0, article: $1)"
		],
		"description": "Gets a detail about the given article."
	},
	"musicDetail": {
		"prefix": "Get Music Detail",
		"body": [
			"musicDetail(detail: $0, music: $1)"
		],
		"description": "Gets a detail about the given song."
	},
	"startWorkout": {
		"prefix": "Start Workout",
		"body": [
			"startWorkout(workout: $0, open: $1, value: $2, unit: $3)"
		],
		"description": "Starts a workout. The value parameter is the amount of whatever unit you place. For example 200 cal, 10 min, or 1 hr"
	},
	"selectContact": {
		"prefix": "Select Contact",
		"body": [
			"selectContact(multiple: $0)"
		],
		"description": "Allows you to select a contact."
	},
	"subscribeToPodcast": {
		"prefix": "Subscribe to Podcast",
		"body": [
			"subscribeToPodcast(feedURL: $0)"
		],
		"description": "Subscribes to the Podcast at the given feed url in Apple Podcasts."
	},
	"text": {
		"prefix": "Text",
		"body": [
			"text(text: $0)"
		],
		"description": "Declares text. Basically just a string."
	},
	"nothing": {
		"prefix": "Nothing",
		"body": [
			"nothing()"
		],
		"description": "Does nothing."
	},
	"cropImage": {
		"prefix": "Crop Image",
		"body": [
			"cropImage(image: $0, position: $1, height: $2, width: $3, x: $4, y: $5)"
		],
		"description": "Crops an Image to the specified parameters."
	},
	"valueFor": {
		"prefix": "Get Value For Key",
		"body": [
			"valueFor(key: $0, dictionary: $1)"
		],
		"description": "Get's the value for a certain key in a dictionary."
	},
	"htmlFromRichText": {
		"prefix": "Make HTML From Rich Text",
		"body": [
			"htmlFromRichText(text: $0, fullDocument: $1)"
		],
		"description": "Creates an HTML document from the provided Rich Text."
	},
	"setValue": {
		"prefix": "Set Dictionary Value",
		"body": [
			"setValue(key: $0, value: $1, dictionary: $2)"
		],
		"description": "Sets a key's value in a dictionary."
	},
	"emojiName": {
		"prefix": "Emoji Name",
		"body": [
			"emojiName(input: $0)"
		],
		"description": "Retrieves the name of the Emoji."
	},
	"getLastVideo": {
		"prefix": "Get Last Video",
		"body": [
			"getLastVideo(count: $0)"
		],
		"description": "Retrieves the last n videos you recorded."
	},
	"setDND": {
		"prefix": "Set Do Not Disturb",
		"body": [
			"setDND(state: $0)"
		],
		"description": "Sets the devices Do Not Disturb to the given boolean."
	},
	"filterNotes": {
		"prefix": "Filter Notes",
		"body": [
			"filterNotes(filter: $0)"
		],
		"description": "Filters the given notes. Placing All Notes in the input will allow you to filter all of your notes."
	},
	"podcastEpisodeDetail": {
		"prefix": "Get Podcast Episode Detail",
		"body": [
			"podcastEpisodeDetail(detail: $0, episode: $1)"
		],
		"description": "Gets a detail about the given Podcast episode. Checkout ATP btw it's a super good show."
	},
	"handoffPlayback": {
		"prefix": "Handoff Playback",
		"body": [
			"handoffPlayback(source: $0, route: $1)"
		],
		"description": "Hands off Current Audio."
	},
	"searchWeb": {
		"prefix": "Search Web",
		"body": [
			"searchWeb(text: $0, destination: $1)"
		],
		"description": "Searches the desired browser ."
	},
	"rotateImage": {
		"prefix": "Rotate Image",
		"body": [
			"rotateImage(image: $0, degrees: $1)"
		],
		"description": "Rotates an image a certain degree."
	},
	"wifiDetails": {
		"prefix": "Get Wi-Fi Details",
		"body": [
			"wifiDetails(detail: $0)"
		],
		"description": "Gets a detail about the devices WiFi."
	},
	"conditionDetail": {
		"prefix": "Get Condition Details",
		"body": [
			"conditionDetail(detail: $0, condition: $1)"
		],
		"description": "Gets a detail about the given condition."
	},
	"number": {
		"prefix": "Number",
		"body": [
			"number(value: $0)"
		],
		"description": "Declares a number."
	},
	"downloadURL": {
		"prefix": "Get Contents of URL",
		"body": [
			"downloadURL(url: $0, method: $1, headers: $2, requestType: $3, requestJSON: $4, requestVar: $5)"
		],
		"description": "Downloads the contents at the given URL. When making a form or JSON request, use the request JSON parameter. When using a file request type, use the request variable parameter."
	},
	"openIn": {
		"prefix": "Open In",
		"body": [
			"openIn(input: $0, app: $1, ask: $2)"
		],
		"description": "Opens input in a certain ask."
	},
	"convertImage": {
		"prefix": "Convert Image",
		"body": [
			"convertImage(image: $0, format: $1, metadata: $2, quality: $3)"
		],
		"description": "Converts an image to a new format."
	},
	"shareEXT": {
		"prefix": "Share With Extensions",
		"body": [
			"shareEXT(file: $0)"
		],
		"description": "Shares input with extensions."
	},
	"imageDetail": {
		"prefix": "Get Image Detail",
		"body": [
			"imageDetail(detail: $0, image: $1)"
		],
		"description": "Gets a detail about the given image."
	},
	"shortcutDetail": {
		"prefix": "Get Shortcut Details",
		"body": [
			"shortcutDetail(detail: $0, input: $1)"
		],
		"description": "Gets a detail about a Shortcut."
	},
	"getCurrentConditions": {
		"prefix": "Get Current Conditions",
		"body": [
			"getCurrentConditions()"
		],
		"description": "Gets the current weather conditions."
	},
	"count": {
		"prefix": "Count",
		"body": [
			"count(type: $0, input: $1)"
		],
		"description": "Counts different things within the given input."
	},
	"setName": {
		"prefix": "Set Name",
		"body": [
			"setName(input: $0, name: $1, includeExtension: $2)"
		],
		"description": "Sets the name of an item."
	},
	"showInStore": {
		"prefix": "Show in Store",
		"body": [
			"showInStore(product: $0)"
		],
		"description": "Shows the provided product in the store."
	},
	"removeEvents": {
		"prefix": "Remove Events",
		"body": [
			"removeEvents(events: $0, includeFuture: $1)"
		],
		"description": "Removes the given events from the calendar."
	},
	"formatSize": {
		"prefix": "Format Size",
		"body": [
			"formatSize(size: $0, format: $1, units: $2)"
		],
		"description": "Formats the size of a file."
	},
	"takePhoto": {
		"prefix": "Take Photo",
		"body": [
			"takePhoto(camera: $0, preview: $1, count: $2)"
		],
		"description": "Takes a photo."
	},
	"alert": {
		"prefix": "Send Alert",
		"body": [
			"alert(alert: $0, title: $1, cancel: $2)"
		],
		"description": "Shows the user an alert."
	},
	"richTextFromMarkdown": {
		"prefix": "Make Rich Text From Markdown",
		"body": [
			"richTextFromMarkdown(markdown: $0)"
		],
		"description": "Makes rich text from Markdown."
	},
	"markup": {
		"prefix": "Markup",
		"body": [
			"markup(input: $0)"
		],
		"description": "Prepends contents to the file."
	},
	"noteDetail": {
		"prefix": "Get Note Details",
		"body": [
			"noteDetail(property: $0, note: $1)"
		],
		"description": "Gets a detail about the note."
	},
	"setWiFi": {
		"prefix": "Set WiFi",
		"body": [
			"setWiFi(state: $0)"
		],
		"description": "Sets the state of the devices WiFi connection."
	},
}